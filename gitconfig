# settings
[user]
    name = Giovanni B. Pullar√†
    email = giovbat@gmail.com
    quotepath = false
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    # signingkey =
[color]
    ui = auto
[color "branch"]
    current = yellow black
    local = yellow
    remote = magenta
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red reverse
    new = green reverse
    whitespace = white reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan reverse
    branch = magenta
# [color "branch"]
# 	current = yellow reverse
# 	local = yellow
# 	remote = green
# [color "diff"]
# 	meta = yellow
# 	frag = white
# 	old = red
# 	new = green
# 	plain = white dim
# [color "status"]
# 	added = green
# 	changed = blue
# 	untracked = red
[core]
    editor = atom --wait
    excludesfile = ~/.gitignore_global
    # treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
    whitespace = space-before-tab,indent-with-non-tab,trailing-space
[alias]
    a = add
    co = checkout
    c = commit
    ca = !git add -A && git commit -av
    # credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    d = diff
    # diff: `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    l = log
    pl = pull
    # pull including all submodules
    ppl = !"git pull; git submodule foreach git pull origin master"
    ps = push
    # undo push
    undopush = push -f origin HEAD^:master
    s = status
    # show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    st = status -s
    cl = clone
    ci = commit -S
    co = checkout
    br = branch
    r = reset
    cp = cherry-pick
    gr = grep -Ii
    diff = diff --word-diff
    branch = branch -ra
    grep = grep -Ii
    bra = branch -ra
    ai = add --interactive
    resign = commit --amend -S --no-edit
    cm = commit -S -m
    cma = commit -S -a -m
    ca = commit -S --amend
    amend = commit -S --amend
    caa = commit -a --amend -C HEAD
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    fl = log -u
    filelog = log -u
    d = diff --word-diff
    dc = diff --cached
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    sl = stash list
    sa = stash apply
    ss = stash save
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"
    rem="!git config -l | grep remote.*url | tail -n +2"
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"
    la = "!git config -l | grep alias | cut -c 7-"
    pl = pull --rebase
[apply]
    # detect whitespace errors when applying a patch
    whitespace = fix
[merge]
    # include summaries of merged commits in newly created merge commit messages
    log = true
# always use `origin` as the default remote on the `master` branch
[branch "master"]
    remote = origin
    merge = refs/heads/master
[remote "origin"]
    push = HEAD
[push]
    default = simple
# # URL shorthands
# [url "git@github.com:"]
#     insteadOf = "gh:"
#     pushInsteadOf = "github:"
#     pushInsteadOf = "git://github.com/"
# [url "git://github.com/"]
#     insteadOf = "github:"
# [url "git@gist.github.com:"]
#     insteadOf = "gst:"
#     pushInsteadOf = "gist:"
#     pushInsteadOf = "git://gist.github.com/"
# [url "git://gist.github.com/"]
#     insteadOf = "gist:"
# [gpg]
# 	program = gpg2